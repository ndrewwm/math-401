{
  "hash": "6f0491c05cf5fbef0082ed6dd0c44711",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Modelling two variables using GPR\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(123)\n\nx <- MASS::mvrnorm(400, c(0, 0), matrix(c(1, 0.5, 0.5, 1), 2, 2))\nf_x <- sin(5*x[, 1]) + sin(7*x[, 2])\ny <- f_x + rnorm(nrow(x), 0, 0.4)\n\nd <- as_tibble(x) |>\n  rename(x1 = V1, x2 = V2) |>\n  mutate(y = y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(d, aes(x1, x2)) +\n  # geom_raster(aes(fill = y), interpolate = TRUE) +\n  geom_contour(aes(z = y))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `stat_contour()`: Zero contours were generated\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in min(x): no non-missing arguments to min; returning Inf\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in max(x): no non-missing arguments to max; returning -Inf\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- function(x1, x2, alpha = 1, rho = 0.001) {\n  alpha^2 * exp(-norm(x1 - x2, type = \"2\")^2 / 2*rho^2)\n}\n\ncompute_covmat <- function(k, x1, x2) {\n  N1 <- nrow(x1)\n  N2 <- nrow(x2)\n  K <- matrix(0, N1, N2)\n  for (i in 1:N1) {\n    for (j in 1:N2) {\n      K[i, j] <- k(x1[i, ], x2[j, ])\n    }\n  }\n  return(K)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsigma <- 0.1\n\ntrain <- slice_sample(d, n = 100)\n\nX <- as.matrix(train[, 1:2])\nY <- train$y\n\nk_XX <- compute_covmat(k, X, X)\nk_xx <- compute_covmat(k, x, x)\nk_xX <- compute_covmat(k, x, X)\n\nm <- k_xX %*% solve(k_XX + sigma^2 * diag(nrow(X))) %*% Y\nS <- k_xx - k_xX %*% solve(k_XX + sigma^2 * diag(nrow(X))) %*% t(k_xX)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nf_post <- MASS::mvrnorm(10000, m, S)\nd$yhat <- colMeans(f_post)\nd$err <- with(d, (yhat - y) / y)\n\nggplot(d, aes(x1, yhat - y)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(d, aes(x2, yhat - y)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n\n```{.r .cell-code}\nd |>\n  summarise(rmse = sqrt(mean((yhat - y)^2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n   rmse\n  <dbl>\n1  1.06\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(d, aes(sample = yhat - y)) + stat_qq() + stat_qq_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-3.png){width=672}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}