{
  "hash": "9d97ef6faa396daeaa7d1b3bb1d2ca4b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Gaussian Processes\"\nsubtitle: \"(I just think they're neat)\"\nauthor: \"Andrew Moore\"\nformat: revealjs\n---\n\n\n\n## An age old story...\n\nCurve fitting: we have some data, but actually want $f$ that satisfies $y = f(x)$.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-1-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n---\n\n- What's the right way?\n    - Function is probably nonlinear... maybe use LOESS?\n    - What if there's uncertainty (error) in our measurements?\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\nThe plot shows some <span style=\"color: blue;\">predictions</span> and our <span style=\"color: orange;\">target</span> function.\n\n---\n\nMost remember the Gaussian distribution: $y \\sim \\mathcal{N}(\\mu, \\sigma)$\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n---\n\nWhat if we gave each point in the data its own distribution?\n\n::: {.panel-tabset}\n\n### Plot\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n### Distribution\n\n$$\n\\mu = \\begin{bmatrix} \\mu_1 \\\\ \\mu_2 \\\\ \\mu_3 \\\\ \\vdots \\\\ \\mu_N \\end{bmatrix} \\ \\ \\mathbf{\\Sigma} =\n  \\begin{bmatrix}\n    \\sigma_1 & & & & & \\\\\n    & \\sigma_2 & & & \\\\\n    & & \\sigma_3 & & \\\\\n    & & & \\ddots & \\\\\n    & & & & \\sigma_N\n  \\end{bmatrix}\n$$\n\n$$\n\\mathbf{y} \\sim \\mathcal{N}_N(\\mu, \\mathbf{\\Sigma})\n$$\n\n:::\n\n---\n\n$$\n\\mathbf{y} \\sim \\mathcal{N}_N(\\mu, \\mathbf{\\Sigma}) \\to f \\sim \\mathcal{GP}(m, k)\n$$\n\n- *Gaussian Process:* (uncountably) infinite collection of random variables, any finite sample is MV normal\n- Shift in perspective: probability distribution over *functions* (infinite lengths), rather than vectors of a fixed size\n- $m$ and $k$ determine the \"flavor\" of the GP's functions\n    - Typical to choose the zero function for $m$, and focus on $k$\n\n## $k$ is used to build covariance matrices\n\n$$\nk(x, x') = \\alpha \\exp \\Bigl(-\\frac{1}{2\\rho^2} (x - x')^2 \\Bigr) \\ \\ \\ \\alpha, \\rho > 0\n$$\n\nFor data $\\mathbf{x} \\in \\mathbb{R}^N$:\n\n$$\nk(\\mathbf{x}, \\mathbf{x}) \\in \\mathbb{R}^{N \\times N} = \\begin{bmatrix}\nk(x_1, x_1) & k(x_2, x_1) & \\cdots & k(x_N, x_1) \\\\\nk(x_1, x_2) & k(x_2, x_2) & \\cdots & k(x_N, x_2) \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\nk(x_1, x_N) & k(x_2, x_N) & \\cdots & k(x_N, x_N)\n\\end{bmatrix}\n$$\n\n---\n\nTraining/sample data: $\\ \\mathbf{x}, \\mathbf{y} \\in \\mathbb{R}^N$\n\nTest points: $\\ \\mathbf{x}_* \\in \\mathbb{R}^M$\n\nPrior: $\\ f \\sim \\mathcal{GP}(m, k) \\to \\mathbf{y}_* \\sim \\mathcal{N}_M(\\mathbf{0}, k(\\mathbf{x}_*, \\mathbf{x}_*))$\n\n<br>\n\nConditional distribution of $\\ \\mathbf{y}_*$ is found via linear algebra:\n\n$$\n\\begin{align*}\n\\mathbf{y}_* | \\mathbf{x}, \\mathbf{y}, \\mathbf{x}_* &\\sim \\mathcal{N}_M (\\mu_*, \\mathbf{\\Sigma}_*) \\\\\n\\mu_* &= k(\\mathbf{x}_*, \\mathbf{x})(k(\\mathbf{x}, \\mathbf{x}))^{-1}\\mathbf{y} \\\\\n\\mathbf{\\Sigma}_* &= k(\\mathbf{x}_*, \\mathbf{x}_*) - k(\\mathbf{x}_*, \\mathbf{x})(k(\\mathbf{x}, \\mathbf{x}))^{-1}k(\\mathbf{x}_*, \\mathbf{x})^\\top\n\\end{align*}\n$$\n\n---\n\nOur <span style=\"color: blue; \"><strong>posterior mean</strong></span>, <span style=\"color: grey;\"><strong>credible interval</strong></span>, and the <span style=\"color: orange;\"><strong>target</strong></span> function.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n## Questions?\n\n![](https://ndrewwm.github.io/math-401/reflections/reflection_3_files/figure-html/unnamed-chunk-5-1.png)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}